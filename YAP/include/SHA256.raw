{
Label _Z19Sha256_UpdateBlocksPjPKhy = a.newLabel();
Label memcpy = a.newLabel();
Label Sha256_Init_xmmword_0 = a.newLabel();
Label Sha256_Init_xmmword_1 = a.newLabel();

const UInt32 SHA256_K_ARRAY[64] = {
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};
Label SHA256_K = a.newLabel();
a.bind(SHA256_K);
a.embed((void*)SHA256_K_ARRAY, sizeof(SHA256_K_ARRAY));

// SetFunction, Init, InitState combined
// Sha256_Init
{
a.bind(Sha256_Init_xmmword_0);
BYTE xmmword_0_raw[] = { 0x67, 0xE6, 0x09, 0x6A, 0x85, 0xAE, 0x67, 0xBB, 0x72, 0xF3, 0x6E, 0x3C, 0x3A, 0xF5, 0x4F, 0xA5 };
a.embed(xmmword_0_raw, sizeof(xmmword_0_raw));

a.bind(Sha256_Init_xmmword_1);
BYTE xmmword_1_raw[] = { 0x7F, 0x52, 0x0E, 0x51, 0x8C, 0x68, 0x05, 0x9B, 0xAB, 0xD9, 0x83, 0x1F, 0x19, 0xCD, 0xE0, 0x5B };
a.embed(xmmword_1_raw, sizeof(xmmword_1_raw));

a.bind(Sha256_Init);
a.lea(rdx, ptr(_Z19Sha256_UpdateBlocksPjPKhy));
a.mov(ptr(rcx), rdx);
a.movdqu(xmm0, xmmword_ptr(Sha256_Init_xmmword_0));
a.movups(xmmword_ptr(rcx, 0x20), xmm0);
a.movdqu(xmm0, xmmword_ptr(Sha256_Init_xmmword_1));
a.mov(qword_ptr(rcx, 8), 0);
a.movups(xmmword_ptr(rcx, 0x30), xmm0);
a.ret();
}

// Sha256_UpdateBlocks
{
Label Sha256_UpdateBlocks_0 = a.newLabel();
Label Sha256_UpdateBlocks_1 = a.newLabel();
Label Sha256_UpdateBlocks_2 = a.newLabel();
Label Sha256_UpdateBlocks_3 = a.newLabel();
Label Sha256_UpdateBlocks_4 = a.newLabel();
Label Sha256_UpdateBlocks_5 = a.newLabel();
a.bind(_Z19Sha256_UpdateBlocksPjPKhy);
a.push(r15);
a.push(r14);
a.push(r13);
a.push(r12);
a.push(rbp);
a.push(rdi);
a.push(rsi);
a.push(rbx);
a.sub(rsp, 0x178);
a.mov(eax, ptr(rcx));
a.mov(ptr(rsp, 0x1B8-0x178), eax);
a.mov(eax, ptr(rcx, 4));
a.mov(ptr(rsp, 0x1B8+8+0x10), r8);
a.mov(ptr(rsp, 0x1B8-0x174), eax);
a.mov(r15d, eax);
a.mov(eax, ptr(rcx, 8));
a.mov(ptr(rsp, 0x1B8+8+0x0), rcx);
a.mov(ptr(rsp, 0x1B8-0x170), eax);
a.mov(r12d, eax);
a.mov(eax, ptr(rcx, 0x0C));
a.mov(ptr(rsp, 0x1B8+8+0x8), rdx);
a.mov(ptr(rsp, 0x1B8-0x16C), eax);
a.mov(r8d, eax);
a.mov(eax, ptr(rcx, 0x10));
a.mov(ptr(rsp, 0x1B8-0x168), eax);
a.mov(ebx, eax);
a.mov(eax, ptr(rcx, 0x14));
a.mov(ptr(rsp, 0x1B8-0x164), eax);
a.mov(esi, eax);
a.mov(eax, ptr(rcx, 0x18));
a.mov(ptr(rsp, 0x1B8-0x160), eax);
a.mov(r9d, eax);
a.mov(eax, ptr(rcx, 0x1C));
a.mov(ptr(rsp, 0x1B8-0x15C), eax);
a.mov(r10d, eax);
a.cmp(qword_ptr(rsp, 0x1B8+8+0x10), 0);
a.strict();
a.jz(Sha256_UpdateBlocks_0);
a.lea(rax, ptr(rsp, 0x1B8-0x148));
a.mov(ecx, r10d);
a.mov(edx, r15d);
a.mov(r10d, r9d);
a.mov(ptr(rsp, 0x1B8-0x150), rax);
a.lea(rax, ptr(rsp, 0x1B8-0x88));
a.mov(ptr(rsp, 0x1B8-0x180), rax);
a.lea(rax, ptr(rsp, 0x1B8-0x144));
a.mov(ptr(rsp, 0x1B8-0x158), rax);
a.bind(Sha256_UpdateBlocks_1);
a.mov(rax, ptr(rsp, 0x1B8+8+0x8));
a.mov(r9, ptr(rsp, 0x1B8-0x158));
a.mov(r15d, edx);
a.lea(r13, ptr(SHA256_K));
a.add(r13, 4);
a.mov(r11d, ptr(rsp, 0x1B8-0x178));
a.lea(r14, ptr(rax, 4));
a.jmp(Sha256_UpdateBlocks_2);
a.bind(Sha256_UpdateBlocks_3);
a.mov(r11d, ptr(rsp, 0x1B8-0x1AC));
a.mov(esi, edi);
a.mov(ebx, ebp);
a.mov(r15d, eax);
a.bind(Sha256_UpdateBlocks_2);
a.mov(eax, ebx);
a.mov(edx, ebx);
a.mov(edi, ptr(r14, -4));
a.ror(edx, 0x0B);
a.ror(eax, 6);
a.xor_(eax, edx);
a.mov(edx, ebx);
a.bswap(edi);
a.mov(ptr(r9, -4), edi);
a.rol(edx, 7);
a.xor_(eax, edx);
a.mov(edx, ptr(r13, -4));
a.add(edx, edi);
a.add(eax, edx);
a.mov(edx, esi);
a.xor_(edx, r10d);
a.and_(edx, ebx);
a.xor_(edx, r10d);
a.add(eax, edx);
a.mov(edx, r11d);
a.add(ecx, eax);
a.mov(eax, r11d);
a.ror(edx, 0x0D);
a.ror(eax, 2);
a.lea(edi, ptr(rcx, r8));
a.mov(r8d, r11d);
a.xor_(eax, edx);
a.mov(edx, r11d);
a.and_(r8d, r15d);
a.rol(edx, 0x0A);
a.xor_(eax, edx);
a.mov(edx, r11d);
a.or_(edx, r15d);
a.and_(edx, r12d);
a.or_(edx, r8d);
a.mov(r8d, edi);
a.add(eax, edx);
a.mov(edx, ptr(r14));
a.ror(r8d, 0x0B);
a.add(eax, ecx);
a.mov(ecx, ebx);
a.bswap(edx);
a.xor_(ecx, esi);
a.add(r10d, edx);
a.mov(ptr(r9), edx);
a.mov(edx, edi);
a.and_(ecx, edi);
a.add(r10d, ptr(r13));
a.ror(edx, 6);
a.xor_(ecx, esi);
a.xor_(edx, r8d);
a.mov(r8d, edi);
a.add(ecx, r10d);
a.mov(r10d, eax);
a.rol(r8d, 7);
a.and_(r10d, r11d);
a.add(r13, 8);
a.add(r14, 8);
a.xor_(edx, r8d);
a.mov(r8d, eax);
a.add(r9, 8);
a.add(edx, ecx);
a.mov(ecx, eax);
a.ror(r8d, 0x0D);
a.ror(ecx, 2);
a.lea(ebp, ptr(rdx, r12));
a.mov(r12d, r11d);
a.xor_(ecx, r8d);
a.mov(r8d, eax);
a.rol(r8d, 0x0A);
a.xor_(r8d, ecx);
a.mov(ecx, eax);
a.or_(ecx, r11d);
a.and_(ecx, r15d);
a.or_(ecx, r10d);
a.mov(r10d, ebx);
a.add(ecx, r8d);
a.mov(r8d, r15d);
a.add(edx, ecx);
a.mov(ecx, esi);
a.mov(ptr(rsp, 0x1B8-0x1AC), edx);
a.lea(rdx, ptr(SHA256_K));
a.add(rdx, 0x37E203404 - 0x37E2033C0);
a.cmp(r13, rdx);
a.strict();
a.jnz(Sha256_UpdateBlocks_3);
a.mov(ecx, ptr(rsp, 0x1B8-0x11C));
a.mov(r14d, ptr(rsp, 0x1B8-0x120));
a.mov(r9d, r15d);
a.mov(r15d, esi);
a.mov(edx, ptr(rsp, 0x1B8-0x1AC));
a.mov(r13, ptr(rsp, 0x1B8-0x150));
a.mov(ptr(rsp, 0x1B8-0x1AC), ebp);
a.mov(ptr(rsp, 0x1B8-0x18C), ecx);
a.mov(ecx, ptr(rsp, 0x1B8-0x10C));
a.mov(ptr(rsp, 0x1B8-0x188), r14d);
a.mov(r8d, ptr(rsp, 0x1B8-0x124));
a.mov(ptr(rsp, 0x1B8-0x1A0), ecx);
a.mov(ecx, ptr(rsp, 0x1B8-0x114));
a.mov(ptr(rsp, 0x1B8-0x184), ecx);
a.mov(ecx, ptr(rsp, 0x1B8-0x110));
a.mov(ptr(rsp, 0x1B8-0x19C), ecx);
a.mov(ecx, ptr(rsp, 0x1B8-0x138));
a.mov(r14d, ptr(rsp, 0x1B8-0x19C));
a.mov(ptr(rsp, 0x1B8-0x194), ecx);
a.mov(ecx, ptr(rsp, 0x1B8-0x128));
a.mov(ptr(rsp, 0x1B8-0x190), ecx);
a.mov(ecx, ptr(rsp, 0x1B8-0x118));
a.mov(ptr(rsp, 0x1B8-0x198), ecx);
a.lea(rcx, ptr(SHA256_K));
a.add(rcx, 0x37E203400 - 0x37E2033C0);
a.mov(ptr(rsp, 0x1B8-0x1A8), rcx);
a.jmp(Sha256_UpdateBlocks_4);
a.bind(Sha256_UpdateBlocks_5);
a.mov(ptr(rsp, 0x1B8-0x19C), esi);
a.mov(ptr(rsp, 0x1B8-0x184), ebx);
a.mov(ptr(rsp, 0x1B8-0x1A0), ecx);
a.mov(ptr(rsp, 0x1B8-0x198), r14d);
a.mov(r14d, esi);
a.bind(Sha256_UpdateBlocks_4);
a.mov(ebx, r14d);
a.mov(ecx, r14d);
a.mov(esi, ptr(r13, 4));
a.mov(ebp, ptr(rsp, 0x1B8-0x188));
a.rol(ebx, 0x0F);
a.rol(ecx, 0x0D);
a.xor_(ecx, ebx);
a.mov(ebx, r14d);
a.mov(r12d, esi);
a.shr(ebx, 0x0A);
a.ror(r12d, 7);
a.xor_(ecx, ebx);
a.mov(ebx, esi);
a.add(ecx, ptr(r13));
a.rol(ebx, 0x0E);
a.xor_(ebx, r12d);
a.mov(r12d, esi);
a.shr(r12d, 3);
a.xor_(ebx, r12d);
a.mov(r12d, ptr(rsp, 0x1B8-0x1A0));
a.add(ecx, ebx);
a.mov(ebx, ptr(rsp, 0x1B8-0x1AC));
a.lea(r14d, ptr(rcx, r8));
a.mov(r8d, ebx);
a.mov(ecx, ebx);
a.mov(ptr(r13, 0x40), r14d);
a.ror(r8d, 6);
a.ror(ecx, 0x0B);
a.xor_(ecx, r8d);
a.mov(r8d, ebx);
a.rol(r8d, 7);
a.xor_(ecx, r8d);
a.mov(r8d, edi);
a.xor_(r8d, r10d);
a.and_(r8d, ebx);
a.mov(ebx, edx);
a.xor_(r8d, r10d);
a.and_(ebx, eax);
a.add(ecx, r8d);
a.mov(r8, ptr(rsp, 0x1B8-0x1A8));
a.add(ecx, ptr(r8));
a.add(ecx, r14d);
a.add(ecx, r15d);
a.lea(r15d, ptr(rcx, r9));
a.mov(r9d, edx);
a.ror(r9d, 2);
a.mov(r8d, r9d);
a.mov(r9d, edx);
a.ror(r9d, 0x0D);
a.xor_(r9d, r8d);
a.mov(r8d, edx);
a.rol(r8d, 0x0A);
a.xor_(r9d, r8d);
a.mov(r8d, edx);
a.or_(r8d, eax);
a.and_(r8d, r11d);
a.or_(r8d, ebx);
a.mov(ebx, r12d);
a.add(r9d, r8d);
a.mov(r8d, r12d);
a.rol(ebx, 0x0D);
a.rol(r8d, 0x0F);
a.add(r9d, ecx);
a.mov(ecx, ptr(r13, 8));
a.xor_(ebx, r8d);
a.mov(r8d, r12d);
a.shr(r8d, 0x0A);
a.mov(r12d, ecx);
a.xor_(ebx, r8d);
a.rol(r12d, 0x0E);
a.add(ebx, esi);
a.mov(esi, ecx);
a.mov(r8d, r12d);
a.mov(r12d, r9d);
a.ror(esi, 7);
a.rol(r12d, 0x0A);
a.xor_(r8d, esi);
a.mov(esi, ecx);
a.shr(esi, 3);
a.xor_(r8d, esi);
a.mov(esi, ptr(rsp, 0x1B8-0x1AC));
a.add(ebx, r8d);
a.add(ebx, ebp);
a.xor_(esi, edi);
a.mov(rbp, ptr(rsp, 0x1B8-0x1A8));
a.mov(r8d, esi);
a.mov(esi, r15d);
a.mov(ptr(r13, 0x44), ebx);
a.add(r10d, ptr(rbp, 4));
a.and_(r8d, r15d);
a.ror(esi, 0x0B);
a.xor_(r8d, edi);
a.add(r10d, ebx);
a.add(r8d, r10d);
a.mov(r10d, r15d);
a.ror(r10d, 6);
a.xor_(esi, r10d);
a.mov(r10d, r15d);
a.rol(r10d, 7);
a.xor_(esi, r10d);
a.add(esi, r8d);
a.lea(r10d, ptr(rsi, r11));
a.mov(r11d, r9d);
a.ror(r11d, 2);
a.mov(r8d, r11d);
a.mov(r11d, r9d);
a.ror(r11d, 0x0D);
a.xor_(r11d, r8d);
a.xor_(r11d, r12d);
a.mov(r12d, r9d);
a.add(edi, ptr(rbp, 8));
a.or_(r12d, edx);
a.mov(r8d, r12d);
a.mov(r12d, r9d);
a.and_(r12d, edx);
a.and_(r8d, eax);
a.or_(r8d, r12d);
a.mov(r12d, ptr(r13, 0x0C));
a.add(r11d, r8d);
a.add(r11d, esi);
a.mov(esi, ptr(r13, 0x0C));
a.shr(r12d, 3);
a.ror(esi, 7);
a.mov(r8d, esi);
a.mov(esi, ptr(r13, 0x0C));
a.rol(esi, 0x0E);
a.xor_(esi, r8d);
a.xor_(esi, r12d);
a.mov(r12d, r14d);
a.add(esi, ecx);
a.mov(ecx, r14d);
a.shr(r12d, 0x0A);
a.rol(ecx, 0x0F);
a.mov(r8d, ecx);
a.mov(ecx, r14d);
a.rol(ecx, 0x0D);
a.xor_(ecx, r8d);
a.mov(r8d, ptr(rsp, 0x1B8-0x1AC));
a.xor_(ecx, r12d);
a.add(esi, ecx);
a.mov(ecx, ptr(rsp, 0x1B8-0x18C));
a.add(esi, ecx);
a.mov(ecx, r15d);
a.xor_(ecx, r8d);
a.add(edi, esi);
a.mov(ptr(r13, 0x48), esi);
a.and_(ecx, r10d);
a.xor_(ecx, r8d);
a.mov(r8d, r10d);
a.add(ecx, edi);
a.mov(edi, r10d);
a.ror(r8d, 0x0B);
a.ror(edi, 6);
a.xor_(r8d, edi);
a.mov(edi, r10d);
a.rol(edi, 7);
a.xor_(r8d, edi);
a.add(r8d, ecx);
a.mov(ecx, r11d);
a.lea(edi, ptr(r8, rax));
a.mov(eax, r11d);
a.ror(ecx, 2);
a.ror(eax, 0x0D);
a.xor_(eax, ecx);
a.mov(ecx, r11d);
a.rol(ecx, 0x0A);
a.xor_(eax, ecx);
a.mov(ecx, r9d);
a.or_(ecx, r11d);
a.mov(r12d, ecx);
a.mov(ecx, r9d);
a.and_(r12d, edx);
a.and_(ecx, r11d);
a.or_(r12d, ecx);
a.add(eax, r12d);
a.mov(r12d, ptr(rsp, 0x1B8-0x194));
a.add(eax, r8d);
a.mov(ecx, r12d);
a.mov(r8d, r12d);
a.ror(r8d, 7);
a.rol(ecx, 0x0E);
a.xor_(ecx, r8d);
a.mov(r8d, r12d);
a.mov(r12d, ebx);
a.shr(r8d, 3);
a.rol(r12d, 0x0F);
a.xor_(ecx, r8d);
a.mov(r8d, ptr(rsp, 0x1B8-0x198));
a.add(ecx, r8d);
a.mov(r8d, ebx);
a.add(ecx, ptr(r13, 0x0C));
a.rol(r8d, 0x0D);
a.xor_(r8d, r12d);
a.mov(r12d, ebx);
a.shr(r12d, 0x0A);
a.xor_(r8d, r12d);
a.mov(r12, rbp);
a.mov(ebp, ptr(rsp, 0x1B8-0x1AC));
a.add(ecx, r8d);
a.mov(r8d, r15d);
a.add(ebp, ptr(r12, 0x0C));
a.xor_(r8d, r10d);
a.add(ebp, ecx);
a.mov(ptr(r13, 0x4C), ecx);
a.and_(r8d, edi);
a.xor_(r8d, r15d);
a.add(ebp, r8d);
a.mov(r8d, edi);
a.ror(r8d, 6);
a.mov(r12d, r8d);
a.mov(r8d, edi);
a.ror(r8d, 0x0B);
a.xor_(r8d, r12d);
a.mov(r12d, edi);
a.add(qword_ptr(rsp, 0x1B8-0x1A8), 0x10);
a.add(r13, 0x10);
a.rol(r12d, 7);
a.xor_(r8d, r12d);
a.add(r8d, ebp);
a.mov(ebp, r11d);
a.add(edx, r8d);
a.and_(ebp, eax);
a.mov(ptr(rsp, 0x1B8-0x1AC), edx);
a.mov(edx, eax);
a.ror(edx, 2);
a.mov(r12d, edx);
a.mov(edx, eax);
a.ror(edx, 0x0D);
a.xor_(edx, r12d);
a.mov(r12d, eax);
a.rol(r12d, 0x0A);
a.xor_(edx, r12d);
a.mov(r12d, r11d);
a.or_(r12d, eax);
a.and_(r12d, r9d);
a.or_(r12d, ebp);
a.add(edx, r12d);
a.add(edx, r8d);
a.mov(r8d, ptr(rsp, 0x1B8-0x1A0));
a.mov(ptr(rsp, 0x1B8-0x18C), r8d);
a.mov(r8d, ptr(rsp, 0x1B8-0x184));
a.mov(r12d, ptr(rsp, 0x1B8-0x19C));
a.mov(ebp, ptr(rsp, 0x1B8-0x190));
a.mov(ptr(rsp, 0x1B8-0x188), r12d);
a.mov(r12d, ptr(rsp, 0x1B8-0x198));
a.mov(ptr(rsp, 0x1B8-0x194), ebp);
a.mov(rbp, ptr(rsp, 0x1B8-0x180));
a.mov(ptr(rsp, 0x1B8-0x190), r12d);
a.cmp(r13, rbp);
a.strict();
a.jnz(Sha256_UpdateBlocks_5);
a.mov(rsi, ptr(rsp, 0x1B8+8+0x0));
a.add(ptr(rsp, 0x1B8-0x178), edx);
a.mov(ebx, ptr(rsp, 0x1B8-0x178));
a.mov(ebp, ptr(rsp, 0x1B8-0x1AC));
a.mov(r12d, ptr(rsp, 0x1B8-0x170));
a.mov(r8d, ptr(rsp, 0x1B8-0x16C));
a.mov(ptr(rsi), ebx);
a.mov(ebx, ptr(rsp, 0x1B8-0x174));
a.add(r12d, r11d);
a.add(r8d, r9d);
a.mov(ecx, ptr(rsp, 0x1B8-0x15C));
a.add(qword_ptr(rsp, 0x1B8+8+0x8), 0x40);
a.add(ebx, eax);
a.mov(ptr(rsi, 8), r12d);
a.mov(ptr(rsi, 4), ebx);
a.mov(eax, ebx);
a.mov(edx, ebx);
a.mov(ebx, ptr(rsp, 0x1B8-0x168));
a.mov(ptr(rsi, 0x0C), r8d);
a.add(ecx, r15d);
a.add(ebx, ebp);
a.mov(ptr(rsi, 0x10), ebx);
a.mov(esi, ptr(rsp, 0x1B8-0x164));
a.add(esi, edi);
a.mov(rdi, ptr(rsp, 0x1B8+8+0x0));
a.mov(ptr(rdi, 0x14), esi);
a.mov(edi, ptr(rsp, 0x1B8-0x160));
a.add(r10d, edi);
a.mov(rdi, ptr(rsp, 0x1B8+8+0x0));
a.sub(qword_ptr(rsp, 0x1B8+8+0x10), 1);
a.strict();
a.mov(ptr(rdi, 0x18), r10d);
a.strict();
a.mov(ptr(rdi, 0x1C), ecx);
a.strict();
a.jz(Sha256_UpdateBlocks_0);
a.mov(ptr(rsp, 0x1B8-0x174), eax);
a.mov(ptr(rsp, 0x1B8-0x170), r12d);
a.mov(ptr(rsp, 0x1B8-0x16C), r8d);
a.mov(ptr(rsp, 0x1B8-0x168), ebx);
a.mov(ptr(rsp, 0x1B8-0x164), esi);
a.mov(ptr(rsp, 0x1B8-0x160), r10d);
a.mov(ptr(rsp, 0x1B8-0x15C), ecx);
a.jmp(Sha256_UpdateBlocks_1);
a.bind(Sha256_UpdateBlocks_0);
a.add(rsp, 0x178);
a.pop(rbx);
a.pop(rsi);
a.pop(rdi);
a.pop(rbp);
a.pop(r12);
a.pop(r13);
a.pop(r14);
a.pop(r15);
a.ret();
}

// Sha256_Final
{
Label Sha256_Final_0 = a.newLabel();
Label Sha256_Final_1 = a.newLabel();
Label Sha256_Final_2 = a.newLabel();
Label Sha256_Final_3 = a.newLabel();
Label Sha256_Final_4 = a.newLabel();
Label Sha256_Final_5 = a.newLabel();
Label Sha256_Final_6 = a.newLabel();
Label Sha256_Final_7 = a.newLabel();
Label Sha256_Final_8 = a.newLabel();
a.bind(Sha256_Final);
a.push(rbp);
a.push(rdi);
a.push(rsi);
a.push(rbx);
a.sub(rsp, 0x28);
a.mov(eax, ptr(rcx, 8));
a.and_(eax, 0x3F);
a.mov(rbx, rcx);
a.mov(rsi, rdx);
a.lea(edx, ptr(rax, 1));
a.mov(ecx, eax);
a.mov(byte_ptr(rbx, rcx, 0, 0x40), 0x80);
a.lea(rbp, ptr(rbx, 0x40));
a.lea(rdi, ptr(rbx, 0x20));
a.cmp(edx, 0x38);
a.strict();
a.ja(Sha256_Final_0);
a.mov(ecx, 0x38);
a.add(eax, 0x41);
a.xor_(r9d, r9d);
a.sub(ecx, edx);
a.add(rax, rbx);
a.mov(edx, ecx);
a.cmp(ecx, 8);
a.strict();
a.jnb(Sha256_Final_3);
a.bind(Sha256_Final_4);
a.and_(ecx, 4);
a.strict();
a.jnz(Sha256_Final_5);
a.test(edx, edx);
a.strict();
a.jz(Sha256_Final_6);
a.mov(byte_ptr(rax), 0);
a.test(dl, 2);
a.strict();
a.jnz(Sha256_Final_8);
a.bind(Sha256_Final_6);
a.mov(rax, ptr(rbx, 8));
a.mov(r8d, 1);
a.mov(rcx, rdi);
a.shl(rax, 3);
a.mov(rdx, rax);
a.bswap(eax);
a.mov(ptr(rbx, 0x7C), eax);
a.shr(rdx, 0x20);
a.bswap(edx);
a.mov(ptr(rbx, 0x78), edx);
a.mov(rdx, rbp);
a.call(qword_ptr(rbx));
a.mov(eax, ptr(rbx, 0x24));
a.mov(edx, ptr(rbx, 0x20));
a.movdqu(xmm0, xmmword_ptr(Sha256_Init_xmmword_0));
a.bswap(edx);
a.bswap(eax);
a.mov(ptr(rsi), edx);
a.mov(ptr(rsi, 4), eax);
a.mov(eax, ptr(rbx, 0x2C));
a.mov(edx, ptr(rbx, 0x28));
a.bswap(eax);
a.mov(ptr(rsi, 0x0C), eax);
a.bswap(edx);
a.mov(ptr(rsi, 8), edx);
a.mov(eax, ptr(rbx, 0x34));
a.mov(edx, ptr(rbx, 0x30));
a.bswap(eax);
a.mov(ptr(rsi, 0x14), eax);
a.bswap(edx);
a.mov(ptr(rsi, 0x10), edx);
a.mov(eax, ptr(rbx, 0x3C));
a.mov(edx, ptr(rbx, 0x38));
a.bswap(eax);
a.mov(ptr(rsi, 0x1C), eax);
a.bswap(edx);
a.mov(ptr(rsi, 0x18), edx);
a.movups(xmmword_ptr(rbx, 0x20), xmm0);
a.movdqu(xmm0, xmmword_ptr(Sha256_Init_xmmword_1));
a.mov(qword_ptr(rbx, 8), 0);
a.movups(xmmword_ptr(rbx, 0x30), xmm0);
a.add(rsp, 0x28);
a.pop(rbx);
a.pop(rsi);
a.pop(rdi);
a.pop(rbp);
a.ret();
a.bind(Sha256_Final_0);
a.cmp(edx, 0x40);
a.strict();
a.jz(Sha256_Final_1);
a.lea(edx, ptr(rax, 0x41));
a.mov(ecx, 0x3F);
a.add(rdx, rbx);
a.sub(ecx, eax);
a.strict();
a.jz(Sha256_Final_1);
a.xor_(eax, eax);
a.bind(Sha256_Final_2);
a.mov(r8d, eax);
a.add(eax, 1);
a.mov(byte_ptr(rdx, r8), 0);
a.cmp(eax, ecx);
a.strict();
a.jb(Sha256_Final_2);
a.bind(Sha256_Final_1);
a.mov(rdx, rbp);
a.mov(rcx, rdi);
a.mov(r8d, 1);
a.call(qword_ptr(rbx));
a.mov(eax, 0x40);
a.mov(ecx, 0x38);
a.xor_(r9d, r9d);
a.add(rax, rbx);
a.mov(edx, ecx);
a.cmp(ecx, 8);
a.strict();
a.jb(Sha256_Final_4);
a.bind(Sha256_Final_3);
a.lea(r8, ptr(rax, 8));
a.mov(qword_ptr(rax), 0);
a.mov(qword_ptr(rcx, rax, 0, -8), 0);
a.and_(r8, 0x0FFFFFFFFFFFFFFF8);
a.sub(rax, r8);
a.lea(edx, ptr(rcx, rax));
a.and_(edx, 0x0FFFFFFF8);
a.cmp(edx, 8);
a.strict();
a.jb(Sha256_Final_6);
a.and_(edx, 0x0FFFFFFF8);
a.xor_(eax, eax);
a.bind(Sha256_Final_7);
a.mov(ecx, eax);
a.add(eax, 8);
a.mov(ptr(r8, rcx), r9);
a.cmp(eax, edx);
a.strict();
a.jb(Sha256_Final_7);
a.jmp(Sha256_Final_6);
a.bind(Sha256_Final_5);
a.mov(dword_ptr(rax), 0);
a.mov(dword_ptr(rax, rdx, 0, -4), 0);
a.jmp(Sha256_Final_6);
a.bind(Sha256_Final_8);
a.xor_(ecx, ecx);
a.mov(ptr(rax, rdx, 0, -2), cx);
a.jmp(Sha256_Final_6);
}

// Sha256_Update
{
Label Sha256_Update_0 = a.newLabel();
Label Sha256_Update_1 = a.newLabel();
Label Sha256_Update_2 = a.newLabel();
Label Sha256_Update_3 = a.newLabel();
Label Sha256_Update_4 = a.newLabel();
Label Sha256_Update_5 = a.newLabel();
Label Sha256_Update_6 = a.newLabel();
Label Sha256_Update_7 = a.newLabel();
Label Sha256_Update_8 = a.newLabel();
Label Sha256_Update_9 = a.newLabel();
Label Sha256_Update_10 = a.newLabel();
Label Sha256_Update_11 = a.newLabel();
a.bind(Sha256_Update);
a.push(r12);
a.push(rbp);
a.push(rdi);
a.push(rsi);
a.push(rbx);
a.sub(rsp, 0x20);
a.mov(rsi, rcx);
a.mov(rdi, rdx);
a.mov(rbx, r8);
a.test(r8, r8);
a.strict();
a.jz(Sha256_Update_0);
a.mov(rax, ptr(rcx, 8));
a.mov(edx, eax);
a.add(rax, r8);
a.mov(ptr(rcx, 8), rax);
a.and_(edx, 0x3F);
a.mov(eax, 0x40);
a.sub(eax, edx);
a.mov(ecx, eax);
a.cmp(r8, rcx);
a.strict();
a.jb(Sha256_Update_1);
a.lea(rbp, ptr(rsi, 0x20));
a.test(edx, edx);
a.strict();
a.jnz(Sha256_Update_2);
a.bind(Sha256_Update_10);
a.mov(r8, rbx);
a.mov(rdx, rdi);
a.mov(rcx, rbp);
a.shr(r8, 6);
a.call(qword_ptr(rsi));
a.mov(rax, rbx);
a.and_(eax, 0x3F);
a.strict();
a.jnz(Sha256_Update_7);
a.bind(Sha256_Update_0);
a.add(rsp, 0x20);
a.pop(rbx);
a.pop(rsi);
a.pop(rdi);
a.pop(rbp);
a.pop(r12);
a.ret();
a.bind(Sha256_Update_7);
a.and_(rbx, 0x0FFFFFFFFFFFFFFC0);
a.lea(rdx, ptr(rsi, 0x40));
a.add(rdi, rbx);
a.cmp(eax, 8);
a.strict();
a.jb(Sha256_Update_8);
a.mov(rcx, ptr(rdi));
a.add(rsi, 0x48);
a.mov(ptr(rsi, -8), rcx);
a.mov(rcx, ptr(rax, rdi, 0, -8));
a.and_(rsi, 0x0FFFFFFFFFFFFFFF8);
a.mov(ptr(rdx, rax, 0, -8), rcx);
a.sub(rdx, rsi);
a.add(eax, edx);
a.sub(rdi, rdx);
a.and_(eax, 0x0FFFFFFF8);
a.cmp(eax, 8);
a.strict();
a.jb(Sha256_Update_0);
a.and_(eax, 0x0FFFFFFF8);
a.xor_(edx, edx);
a.bind(Sha256_Update_9);
a.mov(ecx, edx);
a.add(edx, 8);
a.mov(r8, ptr(rdi, rcx));
a.mov(ptr(rsi, rcx), r8);
a.cmp(edx, eax);
a.strict();
a.jb(Sha256_Update_9);
a.jmp(Sha256_Update_0);
a.bind(Sha256_Update_2);
a.lea(r9, ptr(rsi, 0x40));
a.sub(rbx, rcx);
a.add(rdx, r9);
a.cmp(eax, 8);
a.strict();
a.jnb(Sha256_Update_3);
a.test(al, 4);
a.strict();
a.jnz(Sha256_Update_4);
a.test(eax, eax);
a.strict();
a.jz(Sha256_Update_5);
a.movzx(r8d, byte_ptr(rdi));
a.mov(ptr(rdx), r8b);
a.test(al, 2);
a.strict();
a.jz(Sha256_Update_5);
a.movzx(eax, word_ptr(rdi, rcx, 0, -2));
a.mov(ptr(rdx, rcx, 0, -2), ax);
a.bind(Sha256_Update_5);
a.add(rdi, rcx);
a.mov(r8d, 1);
a.mov(rdx, r9);
a.mov(rcx, rbp);
a.call(qword_ptr(rsi));
a.jmp(Sha256_Update_10);
a.bind(Sha256_Update_8);
a.test(al, 4);
a.strict();
a.jnz(Sha256_Update_11);
a.test(eax, eax);
a.strict();
a.jz(Sha256_Update_0);
a.movzx(ecx, byte_ptr(rdi));
a.mov(ptr(rsi, 0x40), cl);
a.test(al, 2);
a.strict();
a.jz(Sha256_Update_0);
a.movzx(ecx, word_ptr(rax, rdi, 0, -2));
a.mov(ptr(rdx, rax, 0, -2), cx);
a.jmp(Sha256_Update_0);
a.bind(Sha256_Update_1);
a.lea(rcx, ptr(rsi, rdx, 0, 0x40));
a.mov(rdx, rdi);
a.add(rsp, 0x20);
a.pop(rbx);
a.pop(rsi);
a.pop(rdi);
a.pop(rbp);
a.pop(r12);
a.jmp(memcpy);
a.bind(Sha256_Update_3);
a.mov(r8, ptr(rdi));
a.lea(r10, ptr(rdx, 8));
a.mov(r12, rdi);
a.and_(r10, 0x0FFFFFFFFFFFFFFF8);
a.mov(ptr(rdx), r8);
a.mov(r8, ptr(rdi, rcx, 0, -8));
a.mov(ptr(rdx, rcx, 0, -8), r8);
a.sub(rdx, r10);
a.add(eax, edx);
a.sub(r12, rdx);
a.and_(eax, 0x0FFFFFFF8);
a.cmp(eax, 8);
a.strict();
a.jb(Sha256_Update_5);
a.and_(eax, 0x0FFFFFFF8);
a.xor_(edx, edx);
a.bind(Sha256_Update_6);
a.mov(r8d, edx);
a.add(edx, 8);
a.mov(r11, ptr(r12, r8));
a.mov(ptr(r10, r8), r11);
a.cmp(edx, eax);
a.strict();
a.jb(Sha256_Update_6);
a.jmp(Sha256_Update_5);
a.bind(Sha256_Update_11);
a.mov(ecx, ptr(rdi));
a.mov(ptr(rsi, 0x40), ecx);
a.mov(ecx, ptr(rax, rdi, 0, -4));
a.mov(ptr(rdx, rax, 0, -4), ecx);
a.jmp(Sha256_Update_0);
a.bind(Sha256_Update_4);
a.mov(eax, ptr(rdi));
a.mov(ptr(rdx), eax);
a.mov(eax, ptr(rdi, rcx, 0, -4));
a.mov(ptr(rdx, rcx, 0, -4), eax);
a.jmp(Sha256_Update_5);
}

// memcpy
{
Label memcpy_0 = a.newLabel();
Label memcpy_1 = a.newLabel();
a.bind(memcpy);
a.test(rcx, rcx);
a.strict();
a.jz(memcpy_1);
a.test(rdx, rdx);
a.strict();
a.jz(memcpy_1);
a.bind(memcpy_0);
a.test(r8, r8);
a.strict();
a.jz(memcpy_1);
a.mov(r9b, byte_ptr(rdx));
a.mov(byte_ptr(rcx), r9b);
a.inc(rdx);
a.inc(rcx);
a.dec(r8);
a.strict();
a.jnz(memcpy_0);
a.bind(memcpy_1);
a.ret();
}
}